# -*- coding: utf-8 -*-
"""Simple support chat between user and admins."""
from typing import Union

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tgbot.data.config import get_admins
from tgbot.keyboards.inline_main_menu import start_menu_finl
from tgbot.utils.const_functions import ikb
from tgbot.utils.misc.bot_models import FSM

router = Router(name=__name__)


@router.callback_query(F.data == "support_start")
async def support_start(call: CallbackQuery, state: FSM):
    await state.set_state("support_chat")
    kb = InlineKeyboardBuilder()
    kb.row(ikb("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", data="support_stop"))
    kb.row(ikb("üîô –í –º–µ–Ω—é", data="back_to_menu"))
    await call.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –∑–¥–µ—Å—å.",
        reply_markup=kb.as_markup(),
    )


@router.message(StateFilter("support_chat"))
async def support_message(message: Message, state: FSM, bot: Bot):
    """Forward user message to admins with reply and close buttons."""
    admin_kb = InlineKeyboardBuilder()
    admin_kb.row(ikb("–û—Ç–≤–µ—Ç–∏—Ç—å", data=f"support_reply:{message.from_user.id}"))
    admin_kb.row(ikb("–ó–∞–≤–µ—Ä—à–∏—Ç—å", data=f"support_close:{message.from_user.id}"))

    for admin in get_admins():
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (—Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞), —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –≤–∏–¥–µ–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await message.forward(admin)
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        await bot.send_message(
            admin,
            f"–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}",
            reply_markup=admin_kb.as_markup(),
        )

    user_kb = InlineKeyboardBuilder()
    user_kb.row(ikb("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", data="support_stop"))
    user_kb.row(ikb("üîô –í –º–µ–Ω—é", data="back_to_menu"))
    await message.answer(
        "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=user_kb.as_markup(),
    )


@router.callback_query(
    F.data.startswith("support_reply:"),
    F.from_user.id.in_(get_admins()),
)
async def support_reply_call(call: CallbackQuery, state: FSM):
    user_id = int(call.data.split(":")[1])
    await state.update_data(reply_to=user_id)
    await state.set_state("support_admin_reply")
    kb = InlineKeyboardBuilder()
    kb.row(ikb("‚ùå –û—Ç–º–µ–Ω–∞", data="support_cancel"))
    await call.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.",
        reply_markup=kb.as_markup(),
    )
    await call.answer()


@router.message(StateFilter("support_admin_reply"), F.from_user.id.in_(get_admins()))
async def support_admin_reply(message: Message, state: FSM, bot: Bot):
    data = await state.get_data()
    user_id = data.get("reply_to")
    if not user_id:
        await message.answer("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    user_kb = InlineKeyboardBuilder()
    user_kb.row(ikb("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", data="support_stop"))
    user_kb.row(ikb("üîô –í –º–µ–Ω—é", data="back_to_menu"))

    text = message.text or "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."
    await bot.send_message(
        user_id,
        f"–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{text}",
        reply_markup=user_kb.as_markup(),
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    await state.clear()


@router.callback_query(
    F.data == "support_cancel",
    StateFilter("support_admin_reply"),
    F.from_user.id.in_(get_admins()),
)
async def support_admin_cancel(call: CallbackQuery, state: FSM):
    await state.clear()
    await call.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()


@router.callback_query(F.data == "support_stop", StateFilter("support_chat"))
@router.message(F.text == "/stop", StateFilter("support_chat"))
async def support_stop(event: Union[CallbackQuery, Message], state: FSM):
    await state.clear()
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(
            "–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.",
            reply_markup=start_menu_finl(),
        )
        await event.answer()
    else:
        await event.answer(
            "–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.",
            reply_markup=start_menu_finl(),
        )


@router.callback_query(
    F.data.startswith("support_close:"),
    F.from_user.id.in_(get_admins()),
)
async def support_close(call: CallbackQuery, bot: Bot):
    user_id = int(call.data.split(":")[1])
    await bot.send_message(
        user_id,
        "–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.",
        reply_markup=start_menu_finl(),
    )
    await call.message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç.")
    await call.answer()


@router.message(F.text.startswith("/reply"))
async def admin_reply_cmd(message: Message, bot: Bot):
    """Alternative reply method: /reply <user_id> <text> (admins only)."""
    if message.from_user.id not in get_admins():
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <—Ç–µ–∫—Å—Ç>")
        return

    try:
        user_id = int(parts[1])
    except ValueError:
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{parts[2]}")
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


@router.callback_query(F.data == "reviews_start")
async def reviews_start(call: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.row(ikb("üîô –í –º–µ–Ω—é", data="back_to_menu"))
    await call.message.edit_text(
        "–û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
        reply_markup=kb.as_markup(),
    )
